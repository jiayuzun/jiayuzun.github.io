<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[OpenGL作业]]></title>
      <url>http://yoursite.com/2016/09/26/OpenGL%E4%BD%9C%E4%B8%9A/</url>
      <content type="html"><![CDATA[<p>记录选修课OpenGL的QQ作业，不断更新矫正ing。</p>
<a id="more"></a>
<hr>
<h2 id="9-20"><a href="#9-20" class="headerlink" title="9.20"></a>9.20</h2><hr>
<p>1、在网络上查询glut库的介绍，请回答<br>a)它的作用是什么？</p>
<p>GLUT(The OpenGL Utility Toolkit),OpenGL实用工具箱,是一个与窗口系统无关的OpenGL编程工具箱.<br>OpenGL中的gl库是核心库，glu是实用库，glut是实用工具库，gl是核心，glu是对gl的部分封装，glut是OpenGL的跨平台工具库。</p>
<p>b)我们这门课为什么要使用glut?</p>
<p>glut实现了一个简单的窗口应用程序接口,使用它可以更加轻松的学习openGL,让我们集中注意力在openGL上,<br>而不必关心所在的窗口系统.GLUT提供了可移植的API,所以你可以编写出在所有PC和工作站平台上都可以运行的OpenGL程序.<br>GLUT是设计用来构建小型的OpenGL程序.GLUT非常适合用来学习OpenGL和开发简单的OpenGL程序.GLUT不是一个功能完备的工具箱.<br>所以需要复杂用户接口的大型应用最好是用与窗口系统有关的工具箱.</p>
<p>2、参考群文件中的ppt，在自己的电脑上完成glut库在visual studio中的配置，并将讲稿上的第4页的代码输入并通过编译和运行。然后查询网络上的资料，回答下面的问题:<br>glut的三个文件（glut.h，glut32.lib，glut32.dll）各启什么作用？</p>
<p>glut.h         引入OpenGL实用库，glut.h头文件用于编译阶段的审核，很多OpenGL的必须的API函数都在这里面。</p>
<p>glut32.lib     用于链接阶段，在链接各部分目标文件（通常为.obj）到可执行文件（通常为.exe）过程中，<br>            需要在.lib文件中查找动态调用函数（一般为DLL中的函数）的地址信息，此时需要在lib文件中查找<br>            如查找void glutInit(int<em> argc,char*</em> argv)函数的地址偏移就需要查找glut32.lib文件。</p>
<p>glut32.dll    用于运行阶段，如调用void glutInit(int<em> argc,char*</em> argv)函数等，需要在glut32.dll中找到该函数。<br>            DLL可以简单认为是一种包含供别人调用的函数和资源的可执行文件。</p>
<p>3、阅读并尝试理解讲稿第4页的代码，分析opengl程序的代码的结构分几个部分，说说你的分析总结。</p>
<p>设置窗口-&gt;创建一个具有OpenGL场景的窗口-&gt;绘制图形-&gt;显示创建的窗口</p>
<p>4、查询资料并结合上课的内容讲解，请说说opengl的底层工作原理和机制。(结合操作系统，显卡硬件)</p>
<p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160926173111.png?raw=true" alt="photo"><br><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160926173144.png?raw=true" alt="photo"><br><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160926173319.png?raw=true" alt="photo"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[uva-Broken Keyboard (a.k.a. Beiju Text)(链表)]]></title>
      <url>http://yoursite.com/2016/09/23/uva-Broken-Keyboard-a-k-a-Beiju-Text-%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>用数组模拟链表</p>
<a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>11988 - Broken Keyboard (a.k.a. Beiju Text)<br>You’re typing a long text with a broken keyboard. Well it’s not so badly broken. The only problem<br>with the keyboard is that sometimes the “home” key or the “end” key gets automatically pressed<br>(internally).<br>You’re not aware of this issue, since you’re focusing on the text and did not even turn on the<br>monitor! After you finished typing, you can see a text on the screen (if you turn on the monitor).<br>In Chinese, we can call it Beiju. Your task is to find the Beiju text.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>There are several test cases. Each test case is a single line containing at least one and at most 100,000<br>letters, underscores and two special characters ‘[’ and ‘]’. ‘[’ means the “Home” key is pressed<br>internally, and ‘]’ means the “End” key is pressed internally. The input is terminated by end-of-file<br>(EOF).</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each case, print the Beiju text on the screen.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>This_is<em>a</em>[Beiju]_text<br>[[]][][]Happy_Birthday_to_Tsinghua_University</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>BeijuThis_is_a__text<br>Happy_Birthday_to_Tsinghua_University</p>
<h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>给定一个字符串，内部含有“【”和“】”光标转移指令，</p>
<p>【代表光标移向文章头，】代表光标移向文章尾，问最终在屏幕上显示的字符串序列是？</p>
<p>Cur代表当前光标的位置，en代表当前结束的位置。。。模拟输入就好了，用链表；</p>
<p>链表，好题，代码好吊，看了半天，越看越感觉吊；</p>
<hr>
<p>想要做这一题，首先要先明白下面这个操作。</p>
<p><img src="https://github.com/jiayuzun/photo/blob/master/ACM/QQ%E6%88%AA%E5%9B%BE20160923221117.png?raw=true" alt="photo"> </p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> en,cur,next[MAXN];</div><div class="line"><span class="keyword">char</span> s[MAXN];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>))&#123;</div><div class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</div><div class="line">        cur=en=<span class="number">0</span>;</div><div class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'['</span>)cur=<span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">']'</span>)cur=en;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                next[i]=next[cur];</div><div class="line">                next[cur]=i;</div><div class="line">                <span class="keyword">if</span>(cur==en)en=i;</div><div class="line">                cur=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=next[<span class="number">0</span>];i!=<span class="number">0</span>;i=next[i])<span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转载自(<a href="http://www.cnblogs.com/handsomecui/p/4984810.html" target="_blank" rel="external">http://www.cnblogs.com/handsomecui/p/4984810.html</a>)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JEKYLL与HEXO的安装与使用]]></title>
      <url>http://yoursite.com/2016/09/22/JEKYLL%E4%B8%8EHEXO%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>本来没打算写这篇博客的，以为这些东西弄成功就算是会了，但当我想打开jekyll服务器的时候，突发现我已经忘记JEKYLL是怎么下载怎么使用的了。仔细想了想，当初安装的时候也是经历了不少曲折的，看了不少文章才解决的。由此可见记录的重要性，只有记录了下来，当忘记的时候才能方便的查看，而不用问度娘或者一遍一遍的翻看着官网的文档了。</p>
<a id="more"></a>
<hr>
<p>首先是Jekyll,虽然我已经没有使用Jekyll了，但Jekyll相较HEXO也是有着优点的，万一以后想用了呢？故此还是记录下来吧。<br>其实Jekyll并不是一定需要安装，GitHub使用的就是Jekyll，我们只需要在本地编写符合规范的网站源码，然后上传到username.github.io仓库中，就可以由github生成并托管整个网站了。安装Jekyll后，就能在本地搭建一个简单的服务器，<br>然后访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就能看到blog的界面了。</p>
<h2 id="Jekyll的安装"><a href="#Jekyll的安装" class="headerlink" title="Jekyll的安装"></a>Jekyll的安装</h2><p>首先是<a href="http://jekyll.bootcss.com/" target="_blank" rel="external">Jekyll官网</a>，官网的帮助是非常大的。<br>Jekyll官网上说并不建议在Windows系统安装，但其实也是很好安装的。</p>
<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><p>jekyll是基于ruby的，因此在安装jekyll之前得首先要安装ruby。<br><a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">ruby下载网站</a><br>根据自己电脑的情况选择合适的版本下载安装即可。<br>下载后双击进行安装，安装目录随意，但仔细看一下安装选项，注意将ruby命令添加到PATH变量下，使ruby命令能够在任何目录下进行使用。<br>安装完成后，打开cmd窗口或者其他shell窗口，用ruby -v测试一下，看看能不能输出ruby的版本号。</p>
<h3 id="安装Ruby-DevKit"><a href="#安装Ruby-DevKit" class="headerlink" title="安装Ruby DevKit"></a>安装Ruby DevKit</h3><p>DevKit 是windows平台下编译和使用本地C/C++扩展包的工具。它就是用来模拟Linux平台下的make, gcc, sh来进行编译。切换到刚才的下载页面，拉倒最下面，找到“DEVELOPMENT KIT”，然后选择合适的版本进行下载：<br>devkit的安装过程比较简单，选择你要安装的路径，直接进行下一步就可以了。安装成功后，使用gem -v测试是否安装成功。<br>安装成功后，运行如下两个命令：</p>
<pre><code>ruby dk.rb init
ruby dk.rb install
</code></pre><h3 id="安装jekyll"><a href="#安装jekyll" class="headerlink" title="安装jekyll"></a>安装jekyll</h3><pre><code>gem install jekyll
</code></pre><p>这是官方给的指令，但因为某些特殊的原因，我们直接使用rubygems的官方链接会特别特别的慢。不过庆幸的是，国内的淘宝有rubygem的镜像：</p>
<pre><code>gem sources --remove https://rubygems.org/  // 删除官方链接
gem sources -a https://ruby.taobao.org/     // 添加淘宝镜像链接
gem sources -l                              // 查询是否替换成功
</code></pre><p>在一串的提示命令之完成之后，就可以用jekyll -v测试jekyll是否安装成功了，如果能够输出版本号，就说明安装成功了。</p>
<h2 id="Jekyll的使用"><a href="#Jekyll的使用" class="headerlink" title="Jekyll的使用"></a>Jekyll的使用</h2><p>Jekyll的配置先跳过，但具体的文章结构要跟配置文件相符。</p>
<h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>使用代码或者直接在_posts的目录下创建.md文件</p>
<pre><code>jekyll new my-awesome-site
</code></pre><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>恩，Markdown语法。</p>
<h3 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h3><pre><code>cd my-awesome-site //进入站点目录
jekyll serve
</code></pre><p>之后会显示一些信息，复制Server address，粘贴到浏览器就可以看到blog的界面了。</p>
<p>按下ctrl-c就可以关闭服务器了。</p>
<h3 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h3><p>直接打开GitHub，选择仓库然后Commit、Sync同步即可。博客网址为 username.github.io 。</p>
<h2 id="HEXO的安装"><a href="#HEXO的安装" class="headerlink" title="HEXO的安装"></a>HEXO的安装</h2><p>HEXO的安装非常简单。本网站正在使用的就是HEXO，关于HEXO与Jekyll，可以参看下面这段话。</p>
<blockquote>
<p>一个是Ruby写的jekyll，一个是node-js写的hexo。至于区别的话，hexo生成静态页面的速度要比较快，jekyll是把原文上传github，可以直接生成博客，也可以用在线编辑器处理，hexo是本地生成html再上传。至于用哪个可以自己两个都尝试一下，哪个用的爽用哪个咯</p>
</blockquote>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>这肯定是必须的，电脑里要有GitHub与Git shell。去GitHub官网下载，会同时安装GitHub desktop与Git shell,各有各的好处，可以配合起来使用。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="external">下载地址</a></p>
<p>下载安装即可。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>所有必备应用程序安装完成后，即可使用npm安装Hexo。<br>在开始菜单找到Node.js command prompt ，输入如下命令：</p>
<pre><code>npm install -g hexo-cli
</code></pre><h2 id="HEXO的使用"><a href="#HEXO的使用" class="headerlink" title="HEXO的使用"></a>HEXO的使用</h2><p>HEXO的配置同样跳过，这不是本篇的重点，具体的文章结构也要跟主题与配置文件相符。</p>
<h3 id="创建文章-1"><a href="#创建文章-1" class="headerlink" title="创建文章"></a>创建文章</h3><p>使用代码或者直接在source/_posts中创建.md文件</p>
<pre><code>hexo new &quot;postName&quot; #新建文章
其实是 $ hexo new [layout] &lt;title&gt;  layout默认为post
layout有三种默认布局：post、page、draft
</code></pre><h3 id="写作-1"><a href="#写作-1" class="headerlink" title="写作"></a>写作</h3><p>恩，Markdown语法。</p>
<h3 id="生成与部署"><a href="#生成与部署" class="headerlink" title="生成与部署"></a>生成与部署</h3><pre><code>cd my-awesome-site //进入站点目录
</code></pre><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><pre><code>hexo generate #生成静态页面至public目录    
</code></pre><h4 id="开启本地服务器-1"><a href="#开启本地服务器-1" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h4><pre><code>hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）    
</code></pre><h4 id="更新资料"><a href="#更新资料" class="headerlink" title="更新资料"></a>更新资料</h4><p>有时资料可能没有被更新，或是生成的文件与修改前的相同，可以尝试清除缓存并再执行一次。</p>
<pre><code>hexo clean
</code></pre><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><pre><code>hexo deploy #将.deploy目录部署到GitHub
</code></pre><p>可以同时使用Coding与GitHub，需要先安装deployer-git</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>然后在_config.yml中配置一下deploy就可以，配置不是本篇重点，具体还是看看官方文档吧。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VS工程的建立与glut库的配置]]></title>
      <url>http://yoursite.com/2016/09/22/VS%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8Eglut%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>初次使用VS与OpenGL配置方法<br><a id="more"></a></p>
<hr>
<h2 id="VS工程的建立"><a href="#VS工程的建立" class="headerlink" title="VS工程的建立"></a>VS工程的建立</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922092057.png?raw=true" alt="photo"></p>
<h2 id="VS工程的建立-1"><a href="#VS工程的建立-1" class="headerlink" title="VS工程的建立"></a>VS工程的建立</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922092523.png?raw=true" alt="photo"></p>
<p>注意：VS2015默认安装的环境为C#，再次打开VS安装程序即可添加C++。<br>接下来使用默认选项即可成功创建项目。</p>
<h2 id="glut库的配置"><a href="#glut库的配置" class="headerlink" title="glut库的配置"></a>glut库的配置</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922093954.png?raw=true" alt="photo"></p>
<h2 id="glut库的配置-1"><a href="#glut库的配置-1" class="headerlink" title="glut库的配置"></a>glut库的配置</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922094215.png?raw=true" alt="photo"></p>
<h2 id="glut库的配置-2"><a href="#glut库的配置-2" class="headerlink" title="glut库的配置"></a>glut库的配置</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922094408.png?raw=true" alt="photo"></p>
<h2 id="glut库的配置-3"><a href="#glut库的配置-3" class="headerlink" title="glut库的配置"></a>glut库的配置</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922094544.png?raw=true" alt="photo"></p>
<h2 id="glut库的配置-4"><a href="#glut库的配置-4" class="headerlink" title="glut库的配置"></a>glut库的配置</h2><p><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922094610.png?raw=true" alt="photo"></p>
<h2 id="glut库的配置-5"><a href="#glut库的配置-5" class="headerlink" title="glut库的配置"></a>glut库的配置</h2><p>将glut文件夹中的glut32.dll复制到工程文件目录下的Debug文件夹下。<br><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922094736.png?raw=true" alt="photo"><br>如图添加头文件即可</p>
<h2 id="实例运行"><a href="#实例运行" class="headerlink" title="实例运行"></a>实例运行</h2><p>将以下代码复制到MyOpenGl.cpp文件中，按下Ctrl+F5运行<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glut.h&gt;</span> <span class="comment">//包含 glut.h 头文件后, 不再需要包含 gl.h 或 glu.h</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//注意：不是 int，是 init，initialize 初始化的前四个字母</span></span></div><div class="line">&#123;</div><div class="line">	glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);<span class="comment">//设置清除背景的颜色为白色</span></div><div class="line">	glMatrixMode(GL_PROJECTION);</div><div class="line">	glLoadIdentity();</div><div class="line">	glFrustum(<span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">5.0</span>);<span class="comment">//定义一个视景体</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//用 glClearColor()命令设置的颜色清除背景</span></div><div class="line">	glColor3f(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>); <span class="comment">//设置当前颜色为红色（RGB 模式）</span></div><div class="line">	glMatrixMode(GL_MODELVIEW);</div><div class="line">	glLoadIdentity();</div><div class="line">	glTranslatef(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">-2.0</span>);</div><div class="line">	glutWireTeapot(<span class="number">1.0</span>);<span class="comment">//绘制多边形，此多边形将是红色</span></div><div class="line">	glFlush(); <span class="comment">//强制 OpenGL 处理以上的命令。</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123; <span class="comment">//初始化 GLUT</span></div><div class="line">	glutInit(&amp;argc, argv);</div><div class="line">	<span class="comment">//设置窗口的模式</span></div><div class="line">	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</div><div class="line">	<span class="comment">//指定窗口左上角在屏幕上的位置（单位：像素）</span></div><div class="line">	glutInitWindowSize(<span class="number">250</span>, <span class="number">250</span>);</div><div class="line">	<span class="comment">//指定窗口的尺寸（单位：像素）</span></div><div class="line">	glutInitWindowPosition(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">	<span class="comment">//创建一个具有 OpenGL 场景的窗口</span></div><div class="line">	glutCreateWindow(<span class="string">"hello"</span>);</div><div class="line">	init(); <span class="comment">//注意：不是 int</span></div><div class="line">			<span class="comment">//注册显示回调函数</span></div><div class="line">	glutDisplayFunc(display);</div><div class="line">	<span class="comment">//显示创建的窗口；进入事件处理循环，并触发注册后的显示回调函数</span></div><div class="line">	glutMainLoop();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行如下<br><img src="https://github.com/jiayuzun/photo/blob/master/OpenGL/QQ%E6%88%AA%E5%9B%BE20160922103737.png?raw=true" alt="photo"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5167 Fibonacci]]></title>
      <url>http://yoursite.com/2016/08/12/hdu-5167/</url>
      <content type="html"><![CDATA[<p>DFS模板题</p>
<a id="more"></a>
<p>题目链接<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5167" target="_blank" rel="external">HDU 5167</a></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>判断一个数是否能分解为多个斐波那契数的乘积。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">50</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="comment">//预处理，得到斐波那契数列</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        a[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">        a[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">50</span>;i++)</div><div class="line">        &#123;</div><div class="line">                a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> pos)</span> <span class="comment">//pos记录位置</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="comment">//满足条件</span></div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">3</span>;i--) <span class="comment">//从pos往前寻找</span></div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span>(n%a[i]==<span class="number">0</span>) <span class="comment">//满足条件 对该点DFS</span></div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span>(dfs(n/a[i],i)==<span class="number">1</span>)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        get();</div><div class="line">        <span class="keyword">int</span> m,k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</div><div class="line">        <span class="keyword">while</span>(m--)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">                <span class="keyword">if</span>(k==<span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span>(dfs(k,<span class="number">45</span>)==<span class="number">1</span>)</div><div class="line">                        &#123;</div><div class="line">                             <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                        &#123;</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[poj 1979 Red and Black]]></title>
      <url>http://yoursite.com/2016/08/12/poj-1979/</url>
      <content type="html"><![CDATA[<p>DFS模板题</p>
<a id="more"></a>
<p>题目链接<a href="http://poj.org/problem?id=1979" target="_blank" rel="external">POJ 1979</a></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个矩阵，’@’表示起始点，’.’代表能走的路，’#’代表障碍，求最多能走的格子数。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> a[<span class="number">25</span>][<span class="number">25</span>],vis[<span class="number">25</span>][<span class="number">25</span>];</div><div class="line"><span class="keyword">int</span> m,n,sum=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y )</span><span class="comment">//判断是否出界</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">return</span> x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=m&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;y&lt;=n;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span>(vis[x][y]) <span class="comment">//判断是否遍历过</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">        vis[x][y]=<span class="number">1</span>;</div><div class="line">        sum++;</div><div class="line">		<span class="comment">// 从四个方向遍历，也可使用方向数组</span></div><div class="line">        <span class="keyword">if</span>(jc(x+<span class="number">1</span>,y)&amp;&amp;a[x+<span class="number">1</span>][y]==a[x][y]) dfs(x+<span class="number">1</span>,y);</div><div class="line">        <span class="keyword">if</span>(jc(x,y+<span class="number">1</span>)&amp;&amp;a[x][y+<span class="number">1</span>]==a[x][y]) dfs(x,y+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(jc(x<span class="number">-1</span>,y)&amp;&amp;a[x<span class="number">-1</span>][y]==a[x][y]) dfs(x<span class="number">-1</span>,y);</div><div class="line">        <span class="keyword">if</span>(jc(x,y<span class="number">-1</span>)&amp;&amp;a[x][y<span class="number">-1</span>]==a[x][y]) dfs(x,y<span class="number">-1</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m),m||n)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> i,j,d,f,k=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">				<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">                <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">if</span>(a[i][j]==<span class="string">'@'</span>)</div><div class="line">                                &#123;</div><div class="line">                                        a[i][j]=<span class="string">'.'</span>;</div><div class="line">                                        d=i;f=j;</div><div class="line"></div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">                sum=<span class="number">0</span>;</div><div class="line">                dfs(d,f);</div><div class="line">                k=sum;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[将博客从jekyll迁移到Hexo]]></title>
      <url>http://yoursite.com/2016/08/08/%E5%B0%86%E5%8D%9A%E5%AE%A2%E4%BB%8Ejekyll%E8%BF%81%E7%A7%BB%E5%88%B0Hexo/</url>
      <content type="html"><![CDATA[<p><a href="https://hexo.io/" target="_blank" rel="external">HEXO官网</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官网</a><br>这两个官网可以解决所有问题<br><a id="more"></a></p>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>本来只是想上网看看jekyll进阶教程，改一改自己的博客，添加一些个性化的元素，<br>奈何jekyll对新手真是太不友好了，本来写博客就是为了巩固暑假的学的一些算法，并没有时间去仔细琢磨jekyll。<br>后来发现网上一大堆“从jekyll迁移到HEXO“的博客，再我自己浏览了一些HEXO的模板，<br>小清新的风格和便于上手的操作吸引了我，于是便有了这一番的折腾。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>HEXO确实比jekyll好上手的多，花点心思看看<a href="https://hexo.io/" target="_blank" rel="external">HEXO官网</a>，搭建博客遇到的问题基本都能在官网找<br>到答案。具体的一些指令我也不一一在本文中记录了，去官网浏览远比看我记录的指令要好。<br>搭建博客过程中含参考了另一篇博客<a href="http://www.alonemonkey.com/2016/05/20/blog-by-jekyll-hexo/" target="_blank" rel="external">使用jekyll和hexo搭建免费博客</a>,<br>这个博客本身就是用HEXO搭建的，它分别介绍了用jekyll和HEXO搭建博客的过程，讲解的非常详细，易上手。<br>博客配置过程中全靠<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官网</a>,各种插件各种参数都一一举例，我也是将官网整个的看了一遍。  </p>
<h2 id="文档迁移"><a href="#文档迁移" class="headerlink" title="文档迁移"></a>文档迁移</h2><p>把<code>_posts</code>文件夹内的所有文件复制到<code>source/_posts</code>文件夹，并在<code>_config.yml</code>中修改<code>new_post_name</code>参数。</p>
<pre><code>new_post_name: :year-:month-:day-:title.md
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DFS 模板]]></title>
      <url>http://yoursite.com/2016/08/06/dfs-template/</url>
      <content type="html"><![CDATA[<p>DFS算法</p>
<a id="more"></a>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>DFS又名深度优先搜索，其实就是一种有一定策略的枚举。</p>
<p>思想：一搜到底，不通则返。</p>
<p>核心：递归</p>
<p>如图：</p>
<p><img src="https://raw.githubusercontent.com/jiayuzun/photo/master/DFS%E3%80%81BFS/20160806170945.png" alt="photo"></p>
<p>遍历方式： </p>
<blockquote>
<p>S-&gt;A-&gt;B-&gt;C 返回B<br>B-&gt;D-&gt;E 返回A<br>A-&gt;F 返回S<br>S-&gt;H-&gt;I-&gt;J 返回I<br>I-&gt;K 返回H<br>H-&gt;L-G 结束</p>
</blockquote>
<h3 id="模板请见例题。"><a href="#模板请见例题。" class="headerlink" title="模板请见例题。"></a>模板请见例题。</h3><p><a href="https://jiayuzun.github.io/2016/08/12/poj-1979/" target="_blank" rel="external">POJ 1979</a></p>
<p><a href="https://jiayuzun.github.io/2016/08/12/hdu-5167/" target="_blank" rel="external">HDU 5167</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 519E A and B and Lecture Rooms]]></title>
      <url>http://yoursite.com/2016/08/06/codeforces-519E/</url>
      <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一颗无向有边权树，求到两点x,y距离相等的节点数。经典的LCA倍增算法模板。</p>
<a id="more"></a>
<hr>
<p>题目链接<a href="http://codeforces.com/problemset/problem/519/E" target="_blank" rel="external">CodeForces 519E</a></p>
<hr>
<h2 id="题意解析"><a href="#题意解析" class="headerlink" title="题意解析"></a>题意解析</h2><p>求到两节点的距离想的的节点数，最普遍的解法是for循环遍历所有节点，对每一个节点z,<br>分别求z到两节点的距离，如果相等，counter变量就加1，然后输出counter。但不幸的是，数据很大，<br>这种解法会超时。为什么要用倍增算法？因为倍增算法可以顺便求出某节点的孩子的个数，还能求出<br>某节点的第K个祖先。通过这两个信息，我们可以不遍历所有点而直接求出答案。<br>首先奇偶剪枝，当x,y两点间距离为奇数时一定不存在这样的点（你可以随便画个树分析一下）。<br>其次，设s[]数组储存了某节点孩子数。<br>当x,y到LCA(x,y)的距离相等时，节点数为n-s[x1]-s[y1]（x1为x的LCA-1倍祖先，y1为y的LCA-1倍祖先）。<br>不相等时，设y为较深的节点，节点数为s[y3]-s[y2]（y3是a,b两点的中点节点，y2是y3与y相连边上的子节点）。</p>
<h2 id="附加AC代码"><a href="#附加AC代码" class="headerlink" title="附加AC代码"></a>附加AC代码</h2><h3 id="LCA倍增算法详解"><a href="#LCA倍增算法详解" class="headerlink" title="LCA倍增算法详解"></a><a href="https://jiayuzun.github.io/2016/08/05/bz-template/" target="_blank" rel="external">LCA倍增算法详解</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:10240000000,10240000000"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</div><div class="line"><span class="keyword">int</span> n , m , pre[N] , rt[N], mcnt;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x , next;</div><div class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dep[N] , f[<span class="number">17</span>][N] ,Lev , s[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> fa)</span><span class="comment">///也可以用bfs，但bfs不能统计节点孩子个数</span></span></div><div class="line">&#123;</div><div class="line">        dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">        f[<span class="number">0</span>][x] = fa , s[x] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[x] ; i!=<span class="number">-1</span> ; i = e[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> y = e[i].x;</div><div class="line">                <span class="keyword">if</span> (y != fa)</div><div class="line">                &#123;</div><div class="line">                        dfs(y , x);</div><div class="line">                        s[x] += s[y];<span class="comment">///节点x的孩子个数</span></div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> rt)</span><span class="comment">///不需要求孩子个数，同时防止暴栈</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">        q.push(rt);</div><div class="line">        f[<span class="number">0</span>][rt] = <span class="number">0</span>, dep[rt] = <span class="number">1</span>, vis[rt] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (!q.empty())</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> fa = q.front();</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[fa] ; ~i ; i = e[i].next)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> x = e[i].x;</div><div class="line">                        <span class="keyword">if</span> (!vis[x])</div><div class="line">                        &#123;</div><div class="line">                                dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">                                f[<span class="number">0</span>][x] = fa , vis[x] = <span class="number">1</span>;</div><div class="line">                                q.push(x);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (dep[x] &gt; dep[y])</div><div class="line">        &#123;</div><div class="line">                swap(x , y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)<span class="comment">///找y的第dep[y] - dep[x]个祖先</span></div><div class="line">                <span class="keyword">if</span> (dep[y] - dep[x] &gt;&gt; i &amp; <span class="number">1</span>)<span class="comment">//dep[y]-dep[x]刚好比2的i次方大时</span></div><div class="line">                &#123;</div><div class="line">                        y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">if</span> (x == y)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)</div><div class="line">                <span class="keyword">if</span> (f[i][x] != f[i][y])</div><div class="line">                &#123;</div><div class="line">                        x = f[i][x] , y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth_anc</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> k)</span> <span class="comment">///找x的第k个祖先</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= Lev ; ++ i)</div><div class="line">                <span class="keyword">if</span> (k &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        x = f[i][x];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(pre , <span class="number">-1</span> , <span class="keyword">sizeof</span>(pre));</div><div class="line">        <span class="built_in">memset</span>(rt, <span class="number">0</span>, <span class="keyword">sizeof</span>(rt));</div><div class="line">        mcnt = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        e[mcnt].x = y;</div><div class="line">        e[mcnt].next = pre[x];</div><div class="line">        pre[x] = mcnt ++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> i , j , x , y , z, anc;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; n ; ++ i)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                addedge(x, y);</div><div class="line">                addedge(y,x);</div><div class="line">                rt[y]  = x;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (rt[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        anc = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(anc , <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; <span class="number">1</span> &lt;&lt; j &lt; n ; ++ j)</div><div class="line">                <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; ++ i)</div><div class="line">                &#123;</div><div class="line">                        f[j][i] = f[j - <span class="number">1</span>][f[j - <span class="number">1</span>][i]];</div><div class="line">                &#125;</div><div class="line">        Lev = j - <span class="number">1</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</div><div class="line">        <span class="keyword">while</span>(m--)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">if</span>(x==y)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (dep[x] &gt; dep[y])</div><div class="line">                &#123;</div><div class="line">                        swap(x , y);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> pos=LCA(x,y);</div><div class="line">                <span class="keyword">int</span> dis=dep[x]+dep[y]<span class="number">-2</span>*dep[pos];</div><div class="line">                <span class="keyword">if</span>(dis%<span class="number">2</span>==<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                        dis/=<span class="number">2</span>;</div><div class="line">                        <span class="keyword">if</span>(dep[x]==dep[y])</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> x1=get_kth_anc(x,dis<span class="number">-1</span>);</div><div class="line">                                <span class="keyword">int</span> y1=get_kth_anc(y,dis<span class="number">-1</span>);</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-s[x1]-s[y1]);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> y1=get_kth_anc(y,dis<span class="number">-1</span>);</div><div class="line">                                <span class="keyword">int</span> y2=get_kth_anc(y,dis);</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s[y2]-s[y1]);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        work();</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1470 Closest Common Ancestors]]></title>
      <url>http://yoursite.com/2016/08/06/poj-1470/</url>
      <content type="html"><![CDATA[<p>LCA模板题，但要注意scanf的用法。</p>
<a id="more"></a>
<hr>
<p>题目链接<a href="http://poj.org/problem?id=1470" target="_blank" rel="external">POJ 1470</a></p>
<hr>
<p>详解请见<a href="https://jiayuzun.github.io/2016/08/05/hdu-2586/" target="_blank" rel="external">HDU 2586</a></p>
<hr>
<h2 id="附加AC代码"><a href="#附加AC代码" class="headerlink" title="附加AC代码"></a>附加AC代码</h2><p>我用的是LCA-RMQ-ST算法。</p>
<h3 id="LCA-RMQ-ST算法详解"><a href="#LCA-RMQ-ST算法详解" class="headerlink" title="LCA-RMQ-ST算法详解"></a><a href="https://jiayuzun.github.io/2016/08/03/LCA-RMQ-ST-Template/" target="_blank" rel="external">LCA-RMQ-ST算法详解</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;node&gt; V[maxn];</div><div class="line"><span class="keyword">int</span> E[maxn * <span class="number">2</span>], D[maxn * <span class="number">2</span>], first[maxn],counter[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn], dist[maxn], n, m, top = <span class="number">1</span>, root[maxn], st;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">30</span>][maxn * <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        top = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(root, <span class="number">0</span>, <span class="keyword">sizeof</span>(root));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                V[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        node tmp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d:(%d)"</span>,&amp;m,&amp;k);</div><div class="line">                <span class="keyword">while</span>(k--)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> a;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</div><div class="line">                        tmp.x = a;</div><div class="line">                        V[m].push_back(tmp);</div><div class="line">                        tmp.x = m;</div><div class="line">                        V[a].push_back(tmp);</div><div class="line">                        root[a] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">                <span class="keyword">if</span> (root[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        st = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">        vis[u] = <span class="number">1</span>, E[top] = u, D[top] = dep, first[u] = top++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V[u].size(); i++)</div><div class="line">                <span class="keyword">if</span> (!vis[V[u][i].x])</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> v = V[u][i].x;</div><div class="line">                        dfs(v, dep + <span class="number">1</span>);</div><div class="line">                        E[top] = u, D[top++] = dep;</div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</div><div class="line">        &#123;</div><div class="line">                dp[<span class="number">0</span>][i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2(num); i++)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)</div><div class="line">                        <span class="keyword">if</span> (j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= num)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> a = dp[i - <span class="number">1</span>][j], b = dp[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i &gt;&gt; <span class="number">1</span>)];</div><div class="line">                                <span class="keyword">if</span> (D[a] &lt; D[b])</div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = a;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = b;</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> k = (<span class="keyword">int</span>) log2(y - x + <span class="number">1.0</span>);</div><div class="line">        <span class="keyword">int</span> a = dp[k][x], b = dp[k][y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (D[a] &lt; D[b])</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF)</div><div class="line">        &#123;</div><div class="line">                init();</div><div class="line">                <span class="built_in">memset</span>(counter,<span class="number">0</span>,<span class="keyword">sizeof</span>(counter));</div><div class="line">                dfs(st, <span class="number">0</span>);</div><div class="line">                ST(top);</div><div class="line">                <span class="keyword">int</span> x, y;</div><div class="line">                <span class="keyword">int</span> o;</div><div class="line">                <span class="built_in">cin</span>&gt;&gt;o;</div><div class="line">                <span class="keyword">while</span>(o--)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">" (%d %d)"</span>, &amp;x, &amp;y);<span class="comment">//注意双引号后的空格不能少</span></div><div class="line">                        <span class="keyword">int</span> a = first[x], b = first[y];</div><div class="line">                        <span class="keyword">if</span> (a &gt; b)</div><div class="line">                        &#123;</div><div class="line">                                swap(a, b);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">int</span> pos = RMQ(a, b);</div><div class="line">                        counter[E[pos]]++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxn;i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span>(counter[i]!=<span class="number">0</span>)</div><div class="line">                        &#123;</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>,i,counter[i]);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1986 Distance Queries]]></title>
      <url>http://yoursite.com/2016/08/06/poj-1986/</url>
      <content type="html"><![CDATA[<p>LCA模板题</p>
<a id="more"></a>
<hr>
<p>题目链接<a href="http://poj.org/problem?id=1986" target="_blank" rel="external">POJ 1986</a></p>
<hr>
<p>详解请见<a href="https://jiayuzun.github.io/2016/08/05/hdu-2586/" target="_blank" rel="external">HDU 2586</a></p>
<hr>
<h2 id="附加AC代码"><a href="#附加AC代码" class="headerlink" title="附加AC代码"></a>附加AC代码</h2><p>我用的是LCA-RMQ-ST算法。</p>
<h3 id="LCA-RMQ-ST算法详解"><a href="#LCA-RMQ-ST算法详解" class="headerlink" title="LCA-RMQ-ST算法详解"></a><a href="https://jiayuzun.github.io/2016/08/03/LCA-RMQ-ST-Template/" target="_blank" rel="external">LCA-RMQ-ST算法详解</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 40005</span></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x,l;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;node&gt; V[maxn];</div><div class="line"><span class="keyword">int</span> E[maxn * <span class="number">2</span>], D[maxn * <span class="number">2</span>], first[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn], dist[maxn], n, m, top = <span class="number">1</span>, root[maxn], st;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">30</span>][maxn * <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        top = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(root, <span class="number">0</span>, <span class="keyword">sizeof</span>(root));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                V[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a, b,c;</div><div class="line">        node tmp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">char</span> d;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">" %d %d %d %c"</span>, &amp;a, &amp;b,&amp;c,&amp;d);</div><div class="line">                tmp.x = b;</div><div class="line">                tmp.l=c;</div><div class="line">                V[a].push_back(tmp);</div><div class="line">                tmp.x = a;</div><div class="line">                V[b].push_back(tmp);</div><div class="line">                root[b] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">                <span class="keyword">if</span> (root[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        st = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">        dist[st]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">        vis[u] = <span class="number">1</span>, E[top] = u, D[top] = dep, first[u] = top++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V[u].size(); i++)</div><div class="line">                <span class="keyword">if</span> (!vis[V[u][i].x])</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> v = V[u][i].x;</div><div class="line">                        dist[v]=dist[u]+V[u][i].l;</div><div class="line">                        dfs(v, dep + <span class="number">1</span>);</div><div class="line">                        E[top] = u, D[top++] = dep;</div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</div><div class="line">        &#123;</div><div class="line">                dp[<span class="number">0</span>][i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2(num); i++)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)</div><div class="line">                        <span class="keyword">if</span> (j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= num)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> a = dp[i - <span class="number">1</span>][j], b = dp[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i &gt;&gt; <span class="number">1</span>)];</div><div class="line">                                <span class="keyword">if</span> (D[a] &lt; D[b])</div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = a;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = b;</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> k = (<span class="keyword">int</span>) log2(y - x + <span class="number">1.0</span>);</div><div class="line">        <span class="keyword">int</span> a = dp[k][x], b = dp[k][y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (D[a] &lt; D[b])</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        init();</div><div class="line">        dfs(st, <span class="number">0</span>);</div><div class="line">        ST(top);</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;k;</div><div class="line">        <span class="keyword">while</span>(k--)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">int</span> a = first[x], b = first[y];</div><div class="line">                <span class="keyword">if</span> (a &gt; b)</div><div class="line">                &#123;</div><div class="line">                        swap(a, b);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> pos = RMQ(a, b);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dist[x]+dist[y]<span class="number">-2</span>*dist[E[pos]]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 2586 How far away ？]]></title>
      <url>http://yoursite.com/2016/08/05/hdu-2586/</url>
      <content type="html"><![CDATA[<p>给出一颗无向有边权树, 询问若干个(u,v)对的距离。</p>
<a id="more"></a>
<hr>
<p>题目链接 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2586" target="_blank" rel="external">HDU 2586</a></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一棵有边权树，求两点之间的最短距离。<br>两点的最短边其实就是两点之间过LCA的那条边，因此两点间的距离就是这条边的<br>长度。</p>
<p><img src="https://raw.githubusercontent.com/jiayuzun/photo/master/LCA/lca%E6%A8%A1%E6%9D%BF1.png" alt="photo"></p>
<p>如图，求K与F的距离。<br>我们用dist[x]保存 x到根节点A的距离。<br>则K与F的距离等于dist[K]+dist[F]-2*dist[B] (B为K与F的LCA).</p>
<hr>
<h3 id="LCA模板详解链接"><a href="#LCA模板详解链接" class="headerlink" title="LCA模板详解链接"></a><a href="https://jiayuzun.github.io/categories/LCA%EF%BC%88%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%89/" target="_blank" rel="external">LCA模板详解链接</a></h3><h2 id="LCA-RMQ-ST算法"><a href="#LCA-RMQ-ST算法" class="headerlink" title="LCA-RMQ-ST算法"></a>LCA-RMQ-ST算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 40005</span></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x,l;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;node&gt; V[maxn];</div><div class="line"><span class="keyword">int</span> E[maxn * <span class="number">2</span>], D[maxn * <span class="number">2</span>], first[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn], dist[maxn], n, m, top = <span class="number">1</span>, root[maxn], st;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">30</span>][maxn * <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        top = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(root, <span class="number">0</span>, <span class="keyword">sizeof</span>(root));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                V[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a, b,c;</div><div class="line">        node tmp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b,&amp;c);</div><div class="line">                tmp.x = b;</div><div class="line">                tmp.l=c;</div><div class="line">                V[a].push_back(tmp);</div><div class="line">                tmp.x = a;</div><div class="line">                V[b].push_back(tmp);</div><div class="line">                root[b] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">                <span class="keyword">if</span> (root[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        st = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">        dist[st]=<span class="number">0</span>;<span class="comment">//dist[] 初始化</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">        vis[u] = <span class="number">1</span>, E[top] = u, D[top] = dep, first[u] = top++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V[u].size(); i++)</div><div class="line">                <span class="keyword">if</span> (!vis[V[u][i].x])</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> v = V[u][i].x;</div><div class="line">                        dist[v]=dist[u]+V[u][i].l; <span class="comment">//dist[] 更新</span></div><div class="line">                        dfs(v, dep + <span class="number">1</span>);</div><div class="line">                        E[top] = u, D[top++] = dep;</div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</div><div class="line">        &#123;</div><div class="line">                dp[<span class="number">0</span>][i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2(num); i++)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++)</div><div class="line">                        <span class="keyword">if</span> (j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= num)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> a = dp[i - <span class="number">1</span>][j], b = dp[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i &gt;&gt; <span class="number">1</span>)];</div><div class="line">                                <span class="keyword">if</span> (D[a] &lt; D[b])</div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = a;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = b;</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> k = (<span class="keyword">int</span>) log2(y - x + <span class="number">1.0</span>);</div><div class="line">        <span class="keyword">int</span> a = dp[k][x], b = dp[k][y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (D[a] &lt; D[b])</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> T;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">        <span class="keyword">while</span> (T--)</div><div class="line">        &#123;</div><div class="line">                init();</div><div class="line">                dfs(st, <span class="number">0</span>);</div><div class="line">                ST(top);</div><div class="line">                <span class="keyword">int</span> x, y;</div><div class="line">                <span class="keyword">while</span>(m--)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                        <span class="keyword">int</span> a = first[x], b = first[y];</div><div class="line">                        <span class="keyword">if</span> (a &gt; b)</div><div class="line">                        &#123;</div><div class="line">                                swap(a, b);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">int</span> pos = RMQ(a, b);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dist[x]+dist[y]<span class="number">-2</span>*dist[E[pos]]);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Tarjan离线算法"><a href="#Tarjan离线算法" class="headerlink" title="Tarjan离线算法"></a>Tarjan离线算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 40005</span></div><div class="line"><span class="keyword">int</span> pre[maxn], point[maxn], point2[maxn], dist[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">struct</span> Edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        <span class="keyword">int</span> l;</div><div class="line">        <span class="keyword">int</span> next;</div><div class="line">&#125; edge[maxn * <span class="number">2</span>];</div><div class="line"><span class="keyword">struct</span> Query</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        <span class="keyword">int</span> w;</div><div class="line">        <span class="keyword">int</span> u;</div><div class="line">        <span class="keyword">int</span> next;</div><div class="line">&#125; query[maxn];</div><div class="line"><span class="keyword">int</span> top, top2;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(point, <span class="number">-1</span>, <span class="keyword">sizeof</span>(point));</div><div class="line">        <span class="built_in">memset</span>(point2, <span class="number">-1</span>, <span class="keyword">sizeof</span>(point2));</div><div class="line">        top = <span class="number">0</span>;</div><div class="line">        top2 = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l)</span></span></div><div class="line">&#123;</div><div class="line">        edge[top].v = v;</div><div class="line">        edge[top].l = l;</div><div class="line">        edge[top].next = point[u]; </div><div class="line">        point[u] = top++; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span> </span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (x != pre[x])</div><div class="line">        &#123;</div><div class="line">                pre[x] = findset(pre[x]); </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">        query[top2].v = v;</div><div class="line">        query[top2].u = u;</div><div class="line">        query[top2].w = <span class="number">-1</span>;</div><div class="line">        query[top2].next = point2[u]; </div><div class="line">        point2[u] = top2++; </div><div class="line">        query[top2].v = u;</div><div class="line">        query[top2].u = v;</div><div class="line">        query[top2].w = <span class="number">-1</span>;</div><div class="line">        query[top2].next = point2[v]; </div><div class="line">        point2[v] = top2++; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span></span></div><div class="line">&#123;</div><div class="line">        pre[u] = u; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = point[u]; i != <span class="number">-1</span>; i = edge[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (edge[i].v == f)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                dist[edge[i].v] = dist[u] + edge[i].l;<span class="comment">//dist[] 更新</span></div><div class="line">                lca(edge[i].v, u);</div><div class="line">                pre[edge[i].v] = u; </div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="number">1</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = point2[u]; i != <span class="number">-1</span>; i = query[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (vis[query[i].v] == <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        query[i].w = findset(query[i].v);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> root[maxn];</div><div class="line">        <span class="keyword">int</span> T;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; T; ii++)</div><div class="line">        &#123;</div><div class="line">                init();</div><div class="line">                <span class="keyword">int</span> tot, r = <span class="number">-1</span>, a, b, c, m;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;tot, &amp;m);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</div><div class="line">                &#123;</div><div class="line">                        root[i] = i;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot - <span class="number">1</span>; i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">                        add_edge(a, b, c);</div><div class="line">                        add_edge(b, a, c);</div><div class="line">                        root[b] = a;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</div><div class="line">                        <span class="keyword">if</span> (root[i] == i)</div><div class="line">                        &#123;</div><div class="line">                                r = i;  </div><div class="line">                        &#125;</div><div class="line">                <span class="built_in">memset</span>(dist, <span class="number">0</span>, <span class="keyword">sizeof</span>(dist)); <span class="comment">//dist[] 初始化</span></div><div class="line">                <span class="keyword">while</span> (m--)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">                        add_query(a, b);</div><div class="line">                &#125;</div><div class="line">                lca(r, r);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top2; i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span> (query[i].w != <span class="number">-1</span>)</div><div class="line">                        &#123;</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[query[i].v] + dist[query[i].u] - <span class="number">2</span> * dist[query[i].w]);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="倍增算法（在线）"><a href="#倍增算法（在线）" class="headerlink" title="倍增算法（在线）"></a>倍增算法（在线）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:10240000000,10240000000"</span>)<span class="comment">//扩栈，要用c++交，用g++交并没有什么卵用。。。</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">40015</span>;</div><div class="line"><span class="keyword">int</span> n , m , pre[N] , rt[N], mcnt;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x ,val, next;</div><div class="line">&#125; e[N &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dep[N] , f[<span class="number">17</span>][N] , dist[N],Lev , s[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> fa)</span></span></div><div class="line">&#123;</div><div class="line">        dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">        f[<span class="number">0</span>][x] = fa , s[x] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[x] ; i!=<span class="number">-1</span> ; i = e[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> y = e[i].x;</div><div class="line">                <span class="keyword">if</span> (y != fa)</div><div class="line">                &#123;</div><div class="line">                        dist[y]=dist[x]+e[i].val;</div><div class="line">                        dfs(y , x);</div><div class="line">                        s[x] += s[y];</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> rt)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">        q.push(rt);</div><div class="line">        f[<span class="number">0</span>][rt] = <span class="number">0</span>, dep[rt] = <span class="number">1</span>, vis[rt] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (!q.empty())</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> fa = q.front();</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[fa] ; ~i ; i = e[i].next)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> x = e[i].x;</div><div class="line">                        <span class="keyword">if</span> (!vis[x])</div><div class="line">                        &#123;</div><div class="line">                                dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">                                f[<span class="number">0</span>][x] = fa , vis[x] = <span class="number">1</span>;</div><div class="line">                                q.push(x);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (dep[x] &gt; dep[y])</div><div class="line">        &#123;</div><div class="line">                swap(x , y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)</div><div class="line">                <span class="keyword">if</span> (dep[y] - dep[x] &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">if</span> (x == y)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)</div><div class="line">                <span class="keyword">if</span> (f[i][x] != f[i][y])</div><div class="line">                &#123;</div><div class="line">                        x = f[i][x] , y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth_anc</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= Lev ; ++ i)</div><div class="line">                <span class="keyword">if</span> (k &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        x = f[i][x];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(pre , <span class="number">-1</span> , <span class="keyword">sizeof</span>(pre));</div><div class="line">        <span class="built_in">memset</span>(rt, <span class="number">0</span>, <span class="keyword">sizeof</span>(rt));</div><div class="line">        <span class="built_in">memset</span>(dist,<span class="number">0</span>,<span class="keyword">sizeof</span>(dist));</div><div class="line">        mcnt = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">        e[mcnt].x = y;</div><div class="line">        e[mcnt].val=val;</div><div class="line">        e[mcnt].next = pre[x];</div><div class="line">        pre[x] = mcnt ++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> i , j , x , y , z, anc;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; n ; ++ i)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y,&amp;z);</div><div class="line">                addedge(x, y,z);</div><div class="line">                addedge(y,x,z);</div><div class="line">                rt[y]  = x;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (rt[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        anc = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(anc , <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; <span class="number">1</span> &lt;&lt; j &lt; n ; ++ j)</div><div class="line">                <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; ++ i)</div><div class="line">                &#123;</div><div class="line">                        f[j][i] = f[j - <span class="number">1</span>][f[j - <span class="number">1</span>][i]];</div><div class="line">                &#125;</div><div class="line">        Lev = j - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(m--)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[x]+dist[y]<span class="number">-2</span>*dist[LCA(x , y)]);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> t;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">while</span> (t--)</div><div class="line">        &#123;</div><div class="line">                work();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[POJ 1330 Nearest Common Ancestors]]></title>
      <url>http://yoursite.com/2016/08/05/poj-1330/</url>
      <content type="html"><![CDATA[<p>典型的LCA模板题，三种算法都可以过。</p>
<a id="more"></a>
<hr>
<p>题目链接 <a href="http://poj.org/problem?id=1330" target="_blank" rel="external">POJ 1330</a></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一棵树，让你求树上某两个节点的LCA。直接套模板即可。</p>
<h3 id="LCA模板详解链接"><a href="#LCA模板详解链接" class="headerlink" title="LCA模板详解链接"></a><a href="https://jiayuzun.github.io/categories/LCA%EF%BC%88%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%89/" target="_blank" rel="external">LCA模板详解链接</a></h3><h2 id="LCA-RMQ-ST算法"><a href="#LCA-RMQ-ST算法" class="headerlink" title="LCA-RMQ-ST算法"></a>LCA-RMQ-ST算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;node&gt; V[maxn]; <span class="comment">//储存树的结构，也可以使用邻接表</span></div><div class="line"><span class="keyword">int</span> E[maxn * <span class="number">2</span>], D[maxn * <span class="number">2</span>], first[maxn]; <span class="comment">//标号数列   深度数列   某个标号第一次出现的位置</span></div><div class="line"><span class="keyword">int</span> vis[maxn], dis[maxn], n, m, top = <span class="number">1</span>, root[maxn], st; <span class="comment">//dis[] 若边有权值可求距离   root[] 求整棵树的根</span></div><div class="line"><span class="keyword">int</span> dp[<span class="number">30</span>][maxn * <span class="number">2</span>];  <span class="comment">//储存某区间最小值的下标</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        top = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(root, <span class="number">0</span>, <span class="keyword">sizeof</span>(root));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                V[i].clear();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        node tmp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">                tmp.x = b;</div><div class="line">                V[a].push_back(tmp);</div><div class="line">                tmp.x = a;</div><div class="line">                V[b].push_back(tmp);</div><div class="line">                root[b] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">                <span class="keyword">if</span> (root[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        st = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">        vis[u] = <span class="number">1</span>, E[top] = u, D[top] = dep, first[u] = top++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V[u].size(); i++)</div><div class="line">                <span class="keyword">if</span> (!vis[V[u][i].x]) <span class="comment">//储存时双向，因此判断是否为父节点</span></div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> v = V[u][i].x;</div><div class="line">                        dfs(v, dep + <span class="number">1</span>);</div><div class="line">                        E[top] = u, D[top++] = dep; <span class="comment">//dfs回溯过程必须储存，否则原理就错误了</span></div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)<span class="comment">//初始状态</span></div><div class="line">        &#123;</div><div class="line">                dp[<span class="number">0</span>][i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2(num); i++) <span class="comment">//控制区间长度</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++) <span class="comment">//控制区间左端点</span></div><div class="line">                        <span class="keyword">if</span> (j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= num)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> a = dp[i - <span class="number">1</span>][j], b = dp[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i &gt;&gt; <span class="number">1</span>)];</div><div class="line">                                <span class="keyword">if</span> (D[a] &lt; D[b]) <span class="comment">//储存D数组下标，以便找到对应的E数组</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = a; </div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = b;</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> k = (<span class="keyword">int</span>) log2(y - x + <span class="number">1.0</span>);</div><div class="line">        <span class="keyword">int</span> a = dp[k][x], b = dp[k][y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (D[a] &lt; D[b]) <span class="comment">//前后两段比较</span></div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> T;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">        <span class="keyword">while</span> (T--)</div><div class="line">        &#123;</div><div class="line">                init();</div><div class="line">                dfs(st, <span class="number">0</span>);</div><div class="line">                ST(top);</div><div class="line">                <span class="keyword">int</span> x, y;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                <span class="keyword">int</span> a = first[x], b = first[y];</div><div class="line">                <span class="keyword">if</span> (a &gt; b)</div><div class="line">                &#123;</div><div class="line">                        swap(a, b);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> pos = RMQ(a, b);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, E[pos]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Tarjan离线算法"><a href="#Tarjan离线算法" class="headerlink" title="Tarjan离线算法"></a>Tarjan离线算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="keyword">int</span> pre[maxn], point[maxn], point2[maxn];</div><div class="line"><span class="comment">// 储存树  树的邻接表数组  要查询的边的邻接表数组</span></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="comment">//是否完全遍历</span></div><div class="line"><span class="keyword">struct</span> Edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> v; <span class="comment">//连接点</span></div><div class="line">        <span class="keyword">int</span> next; <span class="comment">//下一条从此边的出发点发出的边的序号</span></div><div class="line">&#125; edge[maxn * <span class="number">2</span>]; <span class="comment">//邻接表   跟邻接矩阵一样，就是一种表示连接关系的结构</span></div><div class="line"><span class="keyword">struct</span> Query</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        <span class="keyword">int</span> w; <span class="comment">//找到后LCA后用来储存LCA的</span></div><div class="line">        <span class="keyword">int</span> next;</div><div class="line">&#125; query[maxn]; <span class="comment">//要查询的边的邻接表</span></div><div class="line"><span class="keyword">int</span> top, top2; <span class="comment">//两邻接表的下标变量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(point, <span class="number">-1</span>, <span class="keyword">sizeof</span>(point)); <span class="comment">//邻接表数组初始化，一般都初始化为-1</span></div><div class="line">        <span class="built_in">memset</span>(point2, <span class="number">-1</span>, <span class="keyword">sizeof</span>(point2));</div><div class="line">        top = <span class="number">0</span>;</div><div class="line">        top2 = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">//加边函数，单向的</span></span></div><div class="line">&#123;</div><div class="line">        edge[top].v = v;</div><div class="line">        edge[top].next = point[u]; <span class="comment">///上一条边的编号</span></div><div class="line">        point[u] = top++; <span class="comment">//更新 储存该点刚才所连接的边的编号</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">//要查询的边的加边函数，双向的</span></span></div><div class="line">&#123;</div><div class="line">        query[top2].v = v;</div><div class="line">        query[top2].w = <span class="number">-1</span>;</div><div class="line">        query[top2].next = point2[u];</div><div class="line">        point2[u] = top2++;</div><div class="line">        query[top2].v = u;</div><div class="line">        query[top2].w = <span class="number">-1</span>;</div><div class="line">        query[top2].next = point2[v];</div><div class="line">        point2[v] = top2++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">///并查集</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (x != pre[x])</div><div class="line">        &#123;</div><div class="line">                pre[x] = findset(pre[x]); <span class="comment">//路径压缩</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> <span class="comment">///当前节点，父节点</span></span></div><div class="line">&#123;</div><div class="line">        pre[u] = u; <span class="comment">///设立当前节点的集合 表示该点是树的根</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = point[u]; i != <span class="number">-1</span>; i = edge[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (edge[i].v == f)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                lca(edge[i].v, u); <span class="comment">///搜索子树</span></div><div class="line">                pre[edge[i].v] = u; <span class="comment">///合并子树</span></div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="number">1</span>; <span class="comment">///以u点为集合的点搜索完毕</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = point2[u]; i != <span class="number">-1</span>; i = query[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (vis[query[i].v] == <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        query[i].w = findset(query[i].v); <span class="comment">//储存LCA</span></div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> root[maxn];</div><div class="line">        <span class="keyword">int</span> T;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; T; ii++)</div><div class="line">        &#123;</div><div class="line">                init();</div><div class="line">                <span class="keyword">int</span> tot, r = <span class="number">-1</span>, a, b;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tot);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</div><div class="line">                &#123;</div><div class="line">                        root[i] = i;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot - <span class="number">1</span>; i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">                        add_edge(a, b);</div><div class="line">                        add_edge(b, a);</div><div class="line">                        root[b] = a;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</div><div class="line">                        <span class="keyword">if</span> (root[i] == i)</div><div class="line">                        &#123;</div><div class="line">                                r = i;        <span class="comment">///树的根</span></div><div class="line">                        &#125;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">                add_query(a, b);</div><div class="line">                lca(r, r);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top2; i++)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">if</span> (query[i].w != <span class="number">-1</span>)</div><div class="line">                        &#123;</div><div class="line">                                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query[i].w);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="倍增算法（在线）"><a href="#倍增算法（在线）" class="headerlink" title="倍增算法（在线）"></a>倍增算法（在线）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:10240000000,10240000000"</span>)<span class="comment">//扩栈，要用c++交，用g++交并没有什么卵用。。。</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</div><div class="line"><span class="keyword">int</span> n , m , pre[N] , rt[N], mcnt;<span class="comment">//pre 邻接表数组  rt 求根节点 mcnt 邻接表下标变量</span></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x , next;</div><div class="line">&#125; e[N &lt;&lt; <span class="number">1</span>]; <span class="comment">//邻接表</span></div><div class="line"><span class="keyword">int</span> dep[N] , f[<span class="number">17</span>][N] , Lev , s[N];</div><div class="line"><span class="comment">//dep[]储存深度   1&lt;&lt;16 &lt; N  f[j][i] 表示i的第2^j个祖先 s[]孩子个数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(pre , <span class="number">-1</span> , <span class="keyword">sizeof</span>(pre));</div><div class="line">        <span class="built_in">memset</span>(rt, <span class="number">0</span>, <span class="keyword">sizeof</span>(rt));</div><div class="line">        mcnt = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">//邻接表加边函数</span></span></div><div class="line">&#123;</div><div class="line">        e[mcnt].x = y,</div><div class="line">        e[mcnt].next = pre[x],</div><div class="line">        pre[x] = mcnt ++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> fa)</span><span class="comment">///也可以用bfs，但bfs不能统计节点孩子个数</span></span></div><div class="line">&#123;</div><div class="line">        dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">        f[<span class="number">0</span>][x] = fa , s[x] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[x] ; i!=<span class="number">-1</span> ; i = e[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> y = e[i].x;</div><div class="line">                <span class="keyword">if</span> (y != fa)</div><div class="line">                &#123;</div><div class="line">                        dfs(y , x);</div><div class="line">                        s[x] += s[y];<span class="comment">///节点x的孩子个数</span></div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//	dfs处理后，要进一步处理得到节点的所有祖先</span></div><div class="line"><span class="comment">//	for (j = 1 ; 1 &lt;&lt; j &lt; n ; ++ j)</span></div><div class="line"><span class="comment">//		for (i = 1 ; i &lt;= n ; ++ i)</span></div><div class="line"><span class="comment">//		&#123;</span></div><div class="line"><span class="comment">//			f[j][i] = f[j - 1][f[j - 1][i]];</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"><span class="comment">//	Lev = j - 1;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> rt)</span><span class="comment">///不需要求孩子个数，同时防止暴栈</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">        q.push(rt);</div><div class="line">        f[<span class="number">0</span>][rt] = <span class="number">0</span>, dep[rt] = <span class="number">1</span>, vis[rt] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (!q.empty())</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> fa = q.front();</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[fa] ; ~i ; i = e[i].next)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> x = e[i].x;</div><div class="line">                        <span class="keyword">if</span> (!vis[x])</div><div class="line">                        &#123;</div><div class="line">                                dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">                                f[<span class="number">0</span>][x] = fa , vis[x] = <span class="number">1</span>;</div><div class="line">                                q.push(x);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (dep[x] &gt; dep[y])</div><div class="line">        &#123;</div><div class="line">                swap(x , y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)<span class="comment">///找y的第dep[y] - dep[x]个祖先</span></div><div class="line">                <span class="keyword">if</span> (dep[y] - dep[x] &gt;&gt; i &amp; <span class="number">1</span>)<span class="comment">//dep[y]-dep[x]刚好比2的i次方大时</span></div><div class="line">                &#123;</div><div class="line">                        y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">if</span> (x == y)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)<span class="comment">//同一高度后开始找祖先</span></div><div class="line">                <span class="keyword">if</span> (f[i][x] != f[i][y])<span class="comment">//不停的上次2的i次方，直到i==0</span></div><div class="line">                &#123;</div><div class="line">                        x = f[i][x] , y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth_anc</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> k)</span> <span class="comment">///找x的第k个祖先</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= Lev ; ++ i)</div><div class="line">                <span class="keyword">if</span> (k &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        x = f[i][x];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> i , j , x , y , z, anc;</div><div class="line">        init();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt; n ; ++ i)</div><div class="line">        &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">                addedge(x, y);</div><div class="line">                addedge(y,x);</div><div class="line">                rt[y]  = x;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (rt[i] == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                        anc = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        dfs(anc , <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span> ; <span class="number">1</span> &lt;&lt; j &lt; n ; ++ j)</div><div class="line">                <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= n ; ++ i)</div><div class="line">                &#123;</div><div class="line">                        f[j][i] = f[j - <span class="number">1</span>][f[j - <span class="number">1</span>][i]];</div><div class="line">                &#125;</div><div class="line">        Lev = j - <span class="number">1</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, LCA(x , y));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> t;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">while</span> (t--)</div><div class="line">        &#123;</div><div class="line">                work();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[倍增算法 模板]]></title>
      <url>http://yoursite.com/2016/08/05/bz-template/</url>
      <content type="html"><![CDATA[<p>本文介绍的是LCA在线算法中的倍增算法。</p>
<a id="more"></a>
<hr>
<p>不知道LCA定义？<a href="https://jiayuzun.github.io/2016/08/03/LCA-RMQ-ST-Template/" target="_blank" rel="external">请戳这儿</a></p>
<hr>
<h2 id="算法理论"><a href="#算法理论" class="headerlink" title="算法理论"></a>算法理论</h2><ul>
<li>朴素算法：记录下每个节点的父亲，使节点u,v一步一步地向上找父亲，直到找到相同的“祖先”，即是<br>所求的答案，时间复杂度O(n)</li>
<li>优化算法（倍增法）：利用二进制的思想，想办法使一步一步向上搜索变成以2^k的向上跳。所以<br>定义一个f[][]数组，使f[j][i]表示节点i的2^j倍祖先。</li>
</ul>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>1.预处理出所有节点的深度和父节点</p>
<pre><code>* BFS防止爆栈 无法处理孩子个数
* DFS可能会爆栈 可以处理孩子个数 使用时建议扩栈
</code></pre><p>2.处理各节点的所有祖先节点</p>
<p>3.将所查询的两点上升到同一高度</p>
<pre><code>* 找到祖先(以2^k的高度向上找)
* 未找到祖先，同时上升高度至找到公共祖先
</code></pre><hr>
<h2 id="附加代码"><a href="#附加代码" class="headerlink" title="附加代码"></a>附加代码</h2><p>定义及初始化</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:10240000000,10240000000"</span>)<span class="comment">//扩栈，要用c++交，用g++交并没有什么卵用。。。</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</div><div class="line"><span class="keyword">int</span> n , m , pre[N] , rt[N], mcnt;<span class="comment">//pre 邻接表数组  rt 求根节点 mcnt 邻接表下标变量</span></div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x , next;</div><div class="line">&#125; e[N &lt;&lt; <span class="number">1</span>]; <span class="comment">//邻接表</span></div><div class="line"><span class="keyword">int</span> dep[N] , f[<span class="number">17</span>][N] , Lev , s[N];</div><div class="line"><span class="comment">//dep[]储存深度   1&lt;&lt;16 &lt; N  f[j][i] 表示i的第2^j个祖先 s[]孩子个数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(pre , <span class="number">-1</span> , <span class="keyword">sizeof</span>(pre));</div><div class="line">        <span class="built_in">memset</span>(rt, <span class="number">0</span>, <span class="keyword">sizeof</span>(rt));</div><div class="line">        mcnt = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算法函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">//邻接表加边函数</span></span></div><div class="line">&#123;</div><div class="line">        e[mcnt].x = y,</div><div class="line">        e[mcnt].next = pre[x],</div><div class="line">        pre[x] = mcnt ++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> fa)</span><span class="comment">///也可以用bfs，但bfs不能统计节点孩子个数</span></span></div><div class="line">&#123;</div><div class="line">        dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">        f[<span class="number">0</span>][x] = fa , s[x] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[x] ; i!=<span class="number">-1</span> ; i = e[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> y = e[i].x;</div><div class="line">                <span class="keyword">if</span> (y != fa)</div><div class="line">                &#123;</div><div class="line">                        dfs(y , x);</div><div class="line">                        s[x] += s[y];<span class="comment">///节点x的孩子个数</span></div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//	dfs处理后，要进一步处理得到节点的所有祖先</span></div><div class="line"><span class="comment">//	for (j = 1 ; 1 &lt;&lt; j &lt; n ; ++ j)</span></div><div class="line"><span class="comment">//		for (i = 1 ; i &lt;= n ; ++ i)</span></div><div class="line"><span class="comment">//		&#123;</span></div><div class="line"><span class="comment">//			f[j][i] = f[j - 1][f[j - 1][i]];</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"><span class="comment">//	Lev = j - 1;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> rt)</span><span class="comment">///不需要求孩子个数，同时防止暴栈</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">        q.push(rt);</div><div class="line">        f[<span class="number">0</span>][rt] = <span class="number">0</span>, dep[rt] = <span class="number">1</span>, vis[rt] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (!q.empty())</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">int</span> fa = q.front();</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[fa] ; ~i ; i = e[i].next)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> x = e[i].x;</div><div class="line">                        <span class="keyword">if</span> (!vis[x])</div><div class="line">                        &#123;</div><div class="line">                                dep[x] = dep[fa] + <span class="number">1</span>;</div><div class="line">                                f[<span class="number">0</span>][x] = fa , vis[x] = <span class="number">1</span>;</div><div class="line">                                q.push(x);</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (dep[x] &gt; dep[y])</div><div class="line">        &#123;</div><div class="line">                swap(x , y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)<span class="comment">///找y的第dep[y] - dep[x]个祖先</span></div><div class="line">                <span class="keyword">if</span> (dep[y] - dep[x] &gt;&gt; i &amp; <span class="number">1</span>)<span class="comment">//dep[y]-dep[x]刚好比2的i次方大时</span></div><div class="line">                &#123;</div><div class="line">                        y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">if</span> (x == y)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = Lev ; i &gt;= <span class="number">0</span> ; -- i)<span class="comment">//同一高度后开始找祖先</span></div><div class="line">                <span class="keyword">if</span> (f[i][x] != f[i][y])<span class="comment">//不停的上次2的i次方，直到i==0</span></div><div class="line">                &#123;</div><div class="line">                        x = f[i][x] , y = f[i][y];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> f[<span class="number">0</span>][x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth_anc</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> k)</span> <span class="comment">///找x的第k个祖先</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= Lev ; ++ i)</div><div class="line">                <span class="keyword">if</span> (k &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        x = f[i][x];</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tarjan离线算法 模板]]></title>
      <url>http://yoursite.com/2016/08/04/tarjan-template/</url>
      <content type="html"><![CDATA[<p>本文介绍的是LCA算法中的tarjan离线算法。</p>
<a id="more"></a>
<hr>
<p>不知道LCA定义？<a href="https://jiayuzun.github.io/2016/08/03/LCA-RMQ-ST-Template/" target="_blank" rel="external">请戳这儿</a></p>
<hr>
<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul>
<li>并查集</li>
</ul>
<blockquote>
<p>pre[u]表示u点的父亲<br>pre[pre[pre[…u…]]]可以求u的某一层父亲结点</p>
</blockquote>
<ul>
<li>原理</li>
</ul>
<p>tanjan离线算法的实现并不好叙述，需要深刻理解DFS的过程。给定一棵树，如下：</p>
<p><img src="https://raw.githubusercontent.com/jiayuzun/photo/master/LCA/lca%E6%A8%A1%E6%9D%BF1.png" alt="示例图"></p>
<p>如果我们想求K与F的最近公共祖先，我们先把K和F连接，K指向F，F同样指向K。在DFS过程中，<br>首先从根节点A开始遍历，然后假设遍历到B，再从B开始遍历，到E，到K，然后返回，用一个数组<br>记录K点已经完全遍历，并在回溯的过程中建立并查集，即：</p>
<blockquote>
<p>vis[K]=1<br>pre[K]=E</p>
</blockquote>
<p>再返回</p>
<blockquote>
<p>vis[E]=1<br>pre[E]=B</p>
</blockquote>
<p>然后遍历的F，发现F的连接点K已经完全遍历，则寻找K此时的父节点，找到B点，则B为K、E的LCA。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将所有想要寻找的点对连接起来，若某一点的连接点已经完全遍历，对其连接点找此时树的根，<br>由于树（并查集）是在DFS回溯过程中建立的，此时这个小树的根即为这两点的LCA。时间复杂度：O(n+q)</p>
<h2 id="附加代码"><a href="#附加代码" class="headerlink" title="附加代码"></a>附加代码</h2><p>定义及初始化</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="keyword">int</span> pre[maxn], point[maxn], point2[maxn];</div><div class="line"><span class="comment">// 储存树  树的邻接表数组  要查询的边的邻接表数组</span></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="comment">//是否完全遍历</span></div><div class="line"><span class="keyword">struct</span> Edge</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> v; <span class="comment">//连接点</span></div><div class="line">        <span class="keyword">int</span> next; <span class="comment">//下一条从此边的出发点发出的边的序号</span></div><div class="line">&#125; edge[maxn * <span class="number">2</span>]; <span class="comment">//邻接表   跟邻接矩阵一样，就是一种表示连接关系的结构</span></div><div class="line"><span class="keyword">struct</span> Query</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        <span class="keyword">int</span> w; <span class="comment">//找到后LCA后用来储存LCA的</span></div><div class="line">        <span class="keyword">int</span> next;</div><div class="line">&#125; query[maxn]; <span class="comment">//要查询的边的邻接表</span></div><div class="line"><span class="keyword">int</span> top, top2; <span class="comment">//两邻接表的下标变量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(point, <span class="number">-1</span>, <span class="keyword">sizeof</span>(point)); <span class="comment">//邻接表数组初始化，一般都初始化为-1</span></div><div class="line">        <span class="built_in">memset</span>(point2, <span class="number">-1</span>, <span class="keyword">sizeof</span>(point2));</div><div class="line">        top = <span class="number">0</span>;</div><div class="line">        top2 = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算法函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">//加边函数，单向的</span></span></div><div class="line">&#123;</div><div class="line">        edge[top].v = v;</div><div class="line">        edge[top].next = point[u]; <span class="comment">///上一条边的编号</span></div><div class="line">        point[u] = top++; <span class="comment">//更新 储存该点刚才所连接的边的编号</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="comment">//要查询的边的加边函数，双向的</span></span></div><div class="line">&#123;</div><div class="line">        query[top2].v = v;</div><div class="line">        query[top2].w = <span class="number">-1</span>;</div><div class="line">        query[top2].next = point2[u];</div><div class="line">        point2[u] = top2++;</div><div class="line">        query[top2].v = u;</div><div class="line">        query[top2].w = <span class="number">-1</span>;</div><div class="line">        query[top2].next = point2[v];</div><div class="line">        point2[v] = top2++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findset</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">///并查集</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> (x != pre[x])</div><div class="line">        &#123;</div><div class="line">                pre[x] = findset(pre[x]); <span class="comment">//路径压缩</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> pre[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> <span class="comment">///当前节点，父节点</span></span></div><div class="line">&#123;</div><div class="line">        pre[u] = u; <span class="comment">///设立当前节点的集合 表示该点是树的根</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = point[u]; i != <span class="number">-1</span>; i = edge[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (edge[i].v == f)</div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                lca(edge[i].v, u); <span class="comment">///搜索子树</span></div><div class="line">                pre[edge[i].v] = u; <span class="comment">///合并子树</span></div><div class="line">        &#125;</div><div class="line">        vis[u] = <span class="number">1</span>; <span class="comment">///以u点为集合的点搜索完毕</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = point2[u]; i != <span class="number">-1</span>; i = query[i].next)</div><div class="line">        &#123;</div><div class="line">                <span class="keyword">if</span> (vis[query[i].v] == <span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                        query[i].w = findset(query[i].v); <span class="comment">//储存LCA</span></div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LCA-RMQ-ST 模板]]></title>
      <url>http://yoursite.com/2016/08/03/LCA-RMQ-ST-Template/</url>
      <content type="html"><![CDATA[<p>LCA分为在线算法和离线算法，这里介绍的是在线算法中的ST算法。</p>
<a id="more"></a>
<h2 id="LCA定义"><a href="#LCA定义" class="headerlink" title="LCA定义"></a>LCA定义</h2><p>最近公共祖先是指在一个树或者有向无环图中同时拥有V和W作为后代的最深的结点。<br>在这里，我们定义一个节点也是其自己的后代，因此如果v是ｗ的后代，那么ｗ就是ｖ和ｗ的<br>最近公共祖先。</p>
<hr>
<h2 id="LCA-gt-RMQ"><a href="#LCA-gt-RMQ" class="headerlink" title="LCA-&gt;RMQ"></a>LCA-&gt;RMQ</h2><ul>
<li>DFS，每经过一个点，就记录下这个点的深度和标号</li>
<li>如此得到两个数组：深度数组和标号数组，元素均为2*n-1个。</li>
<li>对于标号数组中的任何两个点，他们的下标在深度数组中对应一个区间，这个区间的最小值就对应着这两个点的LCA。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/jiayuzun/photo/master/LCA/lca%E6%A8%A1%E6%9D%BF2.png" alt="示例图"></p>
<hr>
<h2 id="RMQ–ST–预处理"><a href="#RMQ–ST–预处理" class="headerlink" title="RMQ–ST–预处理"></a>RMQ–ST–预处理</h2><ul>
<li>全称：Sparse Table算法</li>
<li>dp[i][j]表示区间[j,j+2^i-1]的最小值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dp[0][j]=a[j]</div><div class="line">dp[i][j]=min&#123;dp[i-1][j],dp[i-1][j+2^(i-1)]&#125;</div></pre></td></tr></table></figure>
<p>时间复杂度：O(nlogn)</p>
<hr>
<h3 id="一些理解"><a href="#一些理解" class="headerlink" title="一些理解"></a>一些理解</h3><p>现在问题转化为求一个区间最小值，普通算法就是直接遍历区间，即可找到最值。数据量较大时，RMQ是一种<br>更高效的算法。通过预处理，我们得到的dp数组储存了这个大区间中任意起点任意长度（其实长度是2的N次方，但可以这么理解算法）的小区间的最小值。<br>之所以高效就高效在预处理上，通过旧区间的最值得到更大区间的最值，从前到后，就短到长，即可得到所有<br>区间的最小值。</p>
<hr>
<h2 id="RMQ–ST–查询"><a href="#RMQ–ST–查询" class="headerlink" title="RMQ–ST–查询"></a>RMQ–ST–查询</h2><p>查询区间：[s,t]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">k=(int)log2(t-s+1)</div><div class="line">RMQ[s,t]=min&#123;dp[k][s],dp[k][t-(1&lt;&lt;k)+1]&#125;</div></pre></td></tr></table></figure>
<p>时间复杂度：O(1)</p>
<hr>
<h3 id="一些理解-1"><a href="#一些理解-1" class="headerlink" title="一些理解"></a>一些理解</h3><p>查询的话只需要将已知区间转化为dp数组的格式，如果长度不符合2的N次方的形式，就把大区间<br>变成两个符合形式的一前一后区间，直接比较这两个区间的最值即可得到想查询的区间的最值。</p>
<hr>
<h2 id="附加代码"><a href="#附加代码" class="headerlink" title="附加代码"></a>附加代码</h2><p>定义</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> x;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;node&gt; V[maxn]; <span class="comment">//储存树的结构，也可以使用邻接表</span></div><div class="line"><span class="keyword">int</span> E[maxn * <span class="number">2</span>], D[maxn * <span class="number">2</span>], first[maxn]; <span class="comment">//标号数列   深度数列   某个标号第一次出现的位置</span></div><div class="line"><span class="keyword">int</span> vis[maxn], dis[maxn], n, m, top = <span class="number">1</span>, root[maxn], st; <span class="comment">//dis[] 若边有权值可求距离   root[] 求整棵树的根</span></div><div class="line"><span class="keyword">int</span> dp[<span class="number">30</span>][maxn * <span class="number">2</span>];  <span class="comment">//储存某区间最小值的下标</span></div></pre></td></tr></table></figure>
<hr>
<p>算法函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">        vis[u] = <span class="number">1</span>, E[top] = u, D[top] = dep, first[u] = top++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V[u].size(); i++)</div><div class="line">                <span class="keyword">if</span> (!vis[V[u][i].x]) <span class="comment">//储存时双向，因此判断是否为父节点</span></div><div class="line">                &#123;</div><div class="line">                        <span class="keyword">int</span> v = V[u][i].x;</div><div class="line">                        dfs(v, dep + <span class="number">1</span>);</div><div class="line">                        E[top] = u, D[top++] = dep; <span class="comment">//dfs回溯过程必须储存，否则原理就错误了</span></div><div class="line">                &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)<span class="comment">//初始状态</span></div><div class="line">        &#123;</div><div class="line">                dp[<span class="number">0</span>][i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2(num); i++) <span class="comment">//控制区间长度</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; j++) <span class="comment">//控制区间左端点</span></div><div class="line">                        <span class="keyword">if</span> (j + (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span> &lt;= num)</div><div class="line">                        &#123;</div><div class="line">                                <span class="keyword">int</span> a = dp[i - <span class="number">1</span>][j], b = dp[i - <span class="number">1</span>][j + (<span class="number">1</span> &lt;&lt; i &gt;&gt; <span class="number">1</span>)];</div><div class="line">                                <span class="keyword">if</span> (D[a] &lt; D[b]) <span class="comment">//储存D数组下标，以便找到对应的E数组</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = a; </div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                &#123;</div><div class="line">                                        dp[i][j] = b;</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> k = (<span class="keyword">int</span>) log2(y - x + <span class="number">1.0</span>);</div><div class="line">        <span class="keyword">int</span> a = dp[k][x], b = dp[k][y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (D[a] &lt; D[b]) <span class="comment">//前后两段比较</span></div><div class="line">        &#123;</div><div class="line">                <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇博客]]></title>
      <url>http://yoursite.com/2016/08/03/first-blog/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>一直以来都想搭建一个自己的博客，但又不想简单的从博客园或CSDN创建账号，<br>通过GitHub education第一次了解到GitHub，便萌发了通过GitHub pages搭建静态博客的念头。</p>
<a id="more"></a>
<hr>
<h3 id="GitHub是什么？"><a href="#GitHub是什么？" class="headerlink" title="GitHub是什么？"></a>GitHub是什么？</h3><p>如果你对编程有所了解，就一定听说过github。它号称程序员的Facebook，有着极高的人气，许多重要的项目都托管在上面。<br>简单说，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。</p>
<hr>
<h3 id="GitHub-pages是什么？"><a href="#GitHub-pages是什么？" class="headerlink" title="GitHub pages是什么？"></a>GitHub pages是什么？</h3><p>但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。<br>因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。<br>不管何时何地，只要向主机提交commit，就能发布新文章。更妙的是，这一切还是免费的，github提供无限流量，世界各地都有理想的访问速度。</p>
<hr>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>作为一个小白，GitHub确实让人头晕脑涨。先撇开语言的差异不说，里面的pull、commit、fork等等也是让人完全摸不到头脑，<br>git的命令行操作更是令人恶心。但在百度翻译加谷歌的帮助下，也是大概明白了里面的基本操作。在尝试建立了几个仓库后，<br>边着手建立username.github.io仓库。我只需要在本地编写符合规范的网站源码，然后上传到这个仓库中，就可以由github生成并托管整个网站了。<br>网上的教程也是让人眼花缭乱。有用JEKYLL的，有用HEXO的，考虑了半天（(⊙v⊙)虽然并不懂这俩的区别），还是选用了最常见的jekyll（好像比hexo难）。<br>虽然选修课学了网页制作，但学的HTML和DreamWave貌似跟jekyll没什么关系。于是便先套了一个可塑性强的模板，进行了简单的修改配置，在jekyll sever本机中不断的进行更正，<br>以后再慢慢的强化吧。真正写博客时用的是markdown语言，不想多说什么，并不会用。我电脑上连一个好用的编辑器都没有，一个.yml都没法修改（话说写字板记事本能修改encoding吗？），<br>无奈下重新下了个Notepad++,依葫芦画瓢，别人写#号我就写#号，别人写“—”我就跟着写“—”，于是便有了这篇博客。</p>
<hr>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>搭建blog的具体过程等我什么时候会用markdown语言添加图片添加超链接再更新吧O(∩_∩)O~。</p>
]]></content>
    </entry>
    
  
  
</search>
